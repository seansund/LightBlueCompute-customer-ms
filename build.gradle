buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://repo.spring.io/release"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'

war {
    baseName = 'micro-customer'
    version =  '0.0.1'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // tag::jetty[]
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework:spring-web")
    // end::jetty[]
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile group: 'com.cloudant', name:'cloudant-client', version: '2.7.0'
    compile('com.nimbusds:nimbus-jose-jwt:4.23')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.hamcrest:hamcrest-core')
    testCompile('junit:junit:[4,)')
	testCompile('org.springframework:spring-test')
	testCompile('com.jayway.jsonpath:json-path')
	testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

task docker {
    doLast {
        copy {
            from 'build/libs/micro-customer-0.0.1.jar'
            into 'docker'
        }
        file("docker/micro-customer-0.0.1.jar").renameTo(file("docker/app.jar"))

    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

test {
	useJUnit()
	testLogging {
		events 'started', 'passed'
		showStandardStreams = true
	}
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		excludes = ['*Application*']
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}
}

jacocoTestReport {
	reports {
		xml.enabled false
		xml.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
	afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/Application*'
            ])
        })
    }
}

test.finalizedBy jacocoTestReport

check {
	dependsOn jacocoTestCoverageVerification
}
